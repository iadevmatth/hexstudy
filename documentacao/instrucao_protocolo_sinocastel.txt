
üìò Instru√ß√£o t√©cnica: Identifica√ß√£o e estrutura do protocolo Sinocastel ‚Äì D-218LSA-B

üÜî Protocolo identificado:
"New OBD Smart Communication Protocol CB212-C1005 Rev. 4.47"

üîé Aplica√ß√£o:
Este protocolo √© utilizado por dispositivos de rastreamento e telemetria como o D-218LSA-B fabricado pela Sinocastel. Ele transmite pacotes bin√°rios via TCP/IP contendo dados de GPS, OBD-II, eventos e status do ve√≠culo.

üì¶ Estrutura do pacote (rawHex):
Exemplo de pacote:
40408000 043231384C534142323032353030303030330000001001...

1. Header e controle:
| Byte Offset | Bytes       | Significado                                              |
|-------------|-------------|----------------------------------------------------------|
| 0‚Äì1         | 0x40 0x40    | Header fixo do protocolo                                |
| 2‚Äì3         | 0x80 0x00    | Comprimento do pacote                                   |
| 4           | 0x04         | Vers√£o do protocolo (0x04 = criptografado AES)          |

2. Identifica√ß√£o do dispositivo:
| Byte Offset | Bytes       | Significado                                              |
|-------------|-------------|----------------------------------------------------------|
| 5‚Äì24        | 20 bytes    | Device ID em ASCII (ex: 3231384C534142...)              |

3. C√≥digo de comando:
| Byte Offset | Bytes       | Significado                                              |
|-------------|-------------|----------------------------------------------------------|
| 25‚Äì26       | 0x10 0x01   | Protocol ID (ex: 0x1001 para login, 0x4001 para GPS)     |

4. Payload (depende do protocolo):
Para exemplo `Protocol ID = 0x4001` ‚Üí GPS + telemetria

üîÑ Estrutura de `GPS_DATA` (refer√™ncia: se√ß√£o 1.1.3.5)
- `gps_count` (1 byte): n√∫mero de blocos GPS (normalmente 1)
- `gps_array` (19 bytes cada):

| Campo         | Tipo   | Bytes | Unidade         |
|---------------|--------|-------|-----------------|
| Date          | DATE   | 3     | dia/m√™s/ano     |
| Time          | TIME   | 3     | hora:min:seg    |
| Latitude      | U32    | 4     | ms (dividir por 3.6M p/ graus) |
| Longitude     | U32    | 4     | idem            |
| Speed         | U16    | 2     | cm/s            |
| Direction     | U16    | 2     | d√©cimos de grau |
| Flag          | U8     | 1     | Bitfield (fix/sat√©lite/etc.) |

Outros campos (ex: RPM, temperatura, igni√ß√£o) v√™m em estruturas como `STAT_DATA`, `RPM_DATA`, `VSTATE`, etc., e seguem o mesmo princ√≠pio de offsets fixos e unidades espec√≠ficas.

üßÆ Codifica√ß√£o Little-Endian:
- Todos os valores U16/U32 s√£o codificados em little-endian: [LSB, MSB]
- Ex: 0xDA51 = bytes 0x51 0xDA ‚Üí valor = 55889

üîö Terminador:
- Fim do pacote: `0D0A` (CR LF)

üîê Observa√ß√£o:
- Este protocolo pode incluir dados criptografados com AES dependendo da configura√ß√£o.

üì§ Recomenda√ß√£o:
Para interpretar corretamente:
- Ler os bytes do payload conforme o `Protocol ID`
- Aplicar as estruturas definidas no manual (ex: `GPS_ITEM`, `RPM_DATA`, etc.)
- Usar convers√£o little-endian e escalas apropriadas (ex: speed / 100)

‚úÖ Protocolos comuns:
- 0x1001 ‚Üí login
- 0x4001 ‚Üí GPS & OBD real-time
- 0x3004 ‚Üí comandos remotos
- 0x401F ‚Üí upload de dados abrangentes

Use essa estrutura como base para criar um parser autom√°tico em qualquer linguagem.

Documenta√ß√£o completa: New OBD Smart Communication Protocol CB212-C1005 Rev. 4.47.pdf
